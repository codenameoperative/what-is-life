import { useState, useEffect } from 'react'
import { Routes, Route } from 'react-router-dom'
import Game from './components/Game'
import AuthCallback from './pages/AuthCallback'
import Header from './components/Header'
import UtilityBar from './components/UtilityBar'
import Footer from './components/Footer'
import CrimeActivity from './activities/Crime'
import WorkActivity from './activities/Work'
import SearchActivity from './activities/Search'
import HuntActivity from './activities/Hunt'
import FishActivity from './activities/Fish'
import DigActivity from './activities/Dig'
import PostActivity from './activities/Post'
import StreamActivity from './activities/Stream'
import ExploreActivity from './activities/Explore'
import GardenActivity from './activities/Garden'
import Toaster from './components/Toaster/index'
import { useGame } from './contexts/GameContext'
import AdvancedCharacterCreator, { AdvancedCharacterData } from './components/AdvancedCharacterCreator'
import { supabase } from './utils/supabase'

function App() {
  const { state, actions } = useGame()
  const [activeActivity, setActiveActivity] = useState<string | null>(null)
  const [showCharacterCreator, setShowCharacterCreator] = useState(false)
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [searchCooldown, setSearchCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [crimeCooldown, setCrimeCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [workCooldown, setWorkCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [huntCooldown, setHuntCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [fishCooldown, setFishCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [digCooldown, setDigCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [postCooldown, setPostCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [streamCooldown, setStreamCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [exploreCooldown, setExploreCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })
  const [gardenCooldown, setGardenCooldown] = useState<{isOnCooldown: boolean, timeLeft: number}>({
    isOnCooldown: false,
    timeLeft: 0
  })

  // Update search cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setSearchCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update crime cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setCrimeCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update work cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setWorkCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update hunt cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setHuntCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update fish cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setFishCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update dig cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setDigCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update post cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setPostCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update stream cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setStreamCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update explore cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setExploreCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Update garden cooldown every second
  useEffect(() => {
    const interval = setInterval(() => {
      setGardenCooldown(prev => {
        if (prev.isOnCooldown && prev.timeLeft > 0) {
          return { ...prev, timeLeft: prev.timeLeft - 1 }
        } else if (prev.isOnCooldown && prev.timeLeft <= 0) {
          return { isOnCooldown: false, timeLeft: 0 }
        }
        return prev // Return unchanged state if no conditions are met
      })
    }, 1000)

    return () => clearInterval(interval)
  }, [])

  // Keyboard navigation
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      // ESC key to go back
      if (event.key === 'Escape' && activeActivity) {
        setActiveActivity(null)
        return
      }

      // ENTER key to proceed (only when no activity is active)
      if (event.key === 'Enter' && !activeActivity && !isTransitioning) {
        // Find first available activity and select it
        const availableActivities = ['Search', 'Crime', 'Work', 'Hunt', 'Fish', 'Dig', 'Post', 'Stream', 'Explore', 'Garden']
        const firstAvailable = availableActivities.find(activity => {
          switch (activity) {
            case 'Search': return !searchCooldown.isOnCooldown
            case 'Crime': return !crimeCooldown.isOnCooldown
            case 'Work': return !workCooldown.isOnCooldown
            case 'Hunt': return !huntCooldown.isOnCooldown
            case 'Fish': return !fishCooldown.isOnCooldown
            case 'Dig': return !digCooldown.isOnCooldown
            case 'Post': return !postCooldown.isOnCooldown
            case 'Stream': return !streamCooldown.isOnCooldown
            case 'Explore': return !exploreCooldown.isOnCooldown
            case 'Garden': return !gardenCooldown.isOnCooldown
            default: return false
          }
        })

        if (firstAvailable) {
          setActiveActivity(firstAvailable)
        }
      }
    }

    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [activeActivity, isTransitioning, searchCooldown.isOnCooldown, crimeCooldown.isOnCooldown, workCooldown.isOnCooldown, huntCooldown.isOnCooldown, fishCooldown.isOnCooldown, digCooldown.isOnCooldown, postCooldown.isOnCooldown, streamCooldown.isOnCooldown, exploreCooldown.isOnCooldown, gardenCooldown.isOnCooldown])

  // Automated grinding
  useEffect(() => {
    if (!state.settings.automatedGrinding || activeActivity) return

    const interval = setInterval(() => {
      // Find the first available activity that's not on cooldown
      const availableActivities = [
        { name: 'Search', cooldown: searchCooldown },
        { name: 'Crime', cooldown: crimeCooldown },
        { name: 'Work', cooldown: workCooldown },
        { name: 'Hunt', cooldown: huntCooldown },
        { name: 'Fish', cooldown: fishCooldown },
        { name: 'Dig', cooldown: digCooldown },
        { name: 'Post', cooldown: postCooldown },
        { name: 'Stream', cooldown: streamCooldown },
        { name: 'Explore', cooldown: exploreCooldown },
        { name: 'Garden', cooldown: gardenCooldown }
      ]

      const nextActivity = availableActivities.find(activity => !activity.cooldown.isOnCooldown)
      if (nextActivity) {
        setActiveActivity(nextActivity.name)
      }
    }, 1000) // Check every second

    return () => clearInterval(interval)
  }, [state.settings.automatedGrinding, activeActivity, searchCooldown.isOnCooldown, crimeCooldown.isOnCooldown, workCooldown.isOnCooldown, huntCooldown.isOnCooldown, fishCooldown.isOnCooldown, digCooldown.isOnCooldown, postCooldown.isOnCooldown, streamCooldown.isOnCooldown, exploreCooldown.isOnCooldown, gardenCooldown.isOnCooldown])

  const renderActivity = () => {
    switch (activeActivity) {
      case 'Crime':
        return <CrimeActivity
          isOnCooldown={crimeCooldown.isOnCooldown}
          cooldownTime={crimeCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setCrimeCooldown({ isOnCooldown, timeLeft })
          }
          onCrimeComplete={() => setActiveActivity(null)}
        />
      case 'Work':
        return <WorkActivity
          isOnCooldown={workCooldown.isOnCooldown}
          cooldownTime={workCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setWorkCooldown({ isOnCooldown, timeLeft })
          }
          onWorkComplete={() => setActiveActivity(null)}
        />
      case 'Search':
        return <SearchActivity
          isOnCooldown={searchCooldown.isOnCooldown}
          cooldownTime={searchCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setSearchCooldown({ isOnCooldown, timeLeft })
          }
          onSearchComplete={() => setActiveActivity(null)}
        />
      case 'Hunt':
        return <HuntActivity
          isOnCooldown={huntCooldown.isOnCooldown}
          cooldownTime={huntCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setHuntCooldown({ isOnCooldown, timeLeft })
          }
          onHuntComplete={() => setActiveActivity(null)}
        />
      case 'Fish':
        return <FishActivity
          isOnCooldown={fishCooldown.isOnCooldown}
          cooldownTime={fishCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setFishCooldown({ isOnCooldown, timeLeft })
          }
          onFishComplete={() => setActiveActivity(null)}
        />
      case 'Dig':
        return <DigActivity
          isOnCooldown={digCooldown.isOnCooldown}
          cooldownTime={digCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setDigCooldown({ isOnCooldown, timeLeft })
          }
          onDigComplete={() => setActiveActivity(null)}
        />
      case 'Post':
        return <PostActivity
          isOnCooldown={postCooldown.isOnCooldown}
          cooldownTime={postCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setPostCooldown({ isOnCooldown, timeLeft })
          }
          onPostComplete={() => setActiveActivity(null)}
        />
      case 'Stream':
        return <StreamActivity
          isOnCooldown={streamCooldown.isOnCooldown}
          cooldownTime={streamCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setStreamCooldown({ isOnCooldown, timeLeft })
          }
          onStreamComplete={() => setActiveActivity(null)}
        />
      case 'Explore':
        return <ExploreActivity
          isOnCooldown={exploreCooldown.isOnCooldown}
          cooldownTime={exploreCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setExploreCooldown({ isOnCooldown, timeLeft })
          }
          onExploreComplete={() => setActiveActivity(null)}
        />
      case 'Garden':
        return <GardenActivity
          isOnCooldown={gardenCooldown.isOnCooldown}
          cooldownTime={gardenCooldown.timeLeft}
          onCooldownChange={(isOnCooldown, timeLeft) =>
            setGardenCooldown({ isOnCooldown, timeLeft })
          }
          onGardenComplete={() => setActiveActivity(null)}
        />
      default:
        return null
    }
  }
  
  const handleCharacterCreated = (characterData: AdvancedCharacterData) => {
    actions.createCharacter(characterData)
    setShowCharacterCreator(false)
  }

  const handleCharacterCancel = () => {
    setShowCharacterCreator(false)
    // Maybe redirect to login or show a message
  }

  // Check if character creation is needed (user is logged in but no character)
  useEffect(() => {
    // This logic would be more complex in a real app
    // For now, we'll show character creator on demand
  }, [state.character])

  return (
    <Routes>
      <Route path="/auth/callback" element={<AuthCallback />} />
      <Route path="/" element={
        <div className="min-h-screen flex flex-col bg-black text-white">
          {/* Header */}
          <Header />

          {/* Character Creator */}
          {showCharacterCreator && (
            <AdvancedCharacterCreator
              onComplete={handleCharacterCreated}
              onCancel={handleCharacterCancel}
            />
          )}

          {/* Hero */}
          <main className="flex-1">
            <section className="container-max pt-6 sm:pt-10 pb-6 text-center">
              <h1 className="text-3xl sm:text-4xl md:text-5xl font-semibold tracking-tight">What is Life</h1>
              <p className="mt-2 sm:mt-3 text-neutral-400 text-sm sm:text-base">Life is Full of Adventures....</p>

              {/* Setup Notice */}
              {!supabase && (
                <div className="mt-6 max-w-2xl mx-auto">
                  <div className="p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg">
                    <div className="flex items-center justify-center gap-2 mb-2">
                      <svg className="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      <h3 className="text-lg font-medium text-yellow-400">Setup Required</h3>
                    </div>
                    <p className="text-sm text-neutral-300 mb-3">
                      To enable user accounts and character creation, configure Supabase:
                    </p>
                    <ol className="text-xs text-neutral-400 space-y-1">
                      <li>1. Copy <code className="px-1 py-0.5 bg-neutral-800 rounded">env.example</code> to <code className="px-1 py-0.5 bg-neutral-800 rounded">.env</code></li>
                      <li>2. Add your Supabase project URL and anon key</li>
                      <li>3. Create the profiles table (see README)</li>
                    </ol>
                    <p className="text-xs text-neutral-500 mt-3">
                      The game works fully without authentication - this only affects user accounts.
                    </p>
                  </div>
                </div>
              )}

              {/* Character Creation Button */}
              {!state.character && (
                <div className="mt-6">
                  <button
                    onClick={() => setShowCharacterCreator(true)}
                    className="px-4 sm:px-6 py-2 sm:py-3 bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-500 hover:to-purple-600 rounded-lg text-white font-medium transition-all duration-200 shadow-lg shadow-purple-500/25 text-sm sm:text-base"
                  >
                    Create Your Character
                  </button>
                  <p className="text-xs sm:text-sm text-neutral-500 mt-2">Customize your appearance and get starter clothing!</p>
                </div>
              )}
            </section>

            {/* Utility Bar */}
            <section className="container-max">
              <UtilityBar />
            </section>

            {/* Main Actions */}
            <section className="container-max mt-6 pb-12">
              {activeActivity ? (
                <div className="max-w-md mx-auto">
                  <button
                    onClick={() => setActiveActivity(null)}
                    className="mb-4 px-4 py-2 text-sm bg-neutral-800 rounded-lg hover:bg-neutral-700 transition-colors"
                  >
                    ← Back to Activities (ESC)
                  </button>
                  {renderActivity()}
                </div>
              ) : (
                <div>
                  {/* Keyboard shortcuts hint */}
                  <div className="text-center mb-4">
                    <p className="text-xs text-neutral-500">
                      💡 Press <kbd className="px-1 py-0.5 bg-neutral-800 rounded text-xs">ENTER</kbd> to start first available activity
                    </p>
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3 sm:gap-4">
                    {['Search','Crime','Work','Hunt','Fish','Dig','Post','Stream','Explore','Garden'].map((label) => {
                    const isActive = ['Search', 'Crime', 'Work', 'Hunt', 'Fish', 'Dig', 'Post', 'Stream', 'Explore', 'Garden'].includes(label)
                    const isSearchOnCooldown = label === 'Search' && searchCooldown.isOnCooldown
                    const isCrimeOnCooldown = label === 'Crime' && crimeCooldown.isOnCooldown
                    const isWorkOnCooldown = label === 'Work' && workCooldown.isOnCooldown
                    const isFishOnCooldown = label === 'Fish' && fishCooldown.isOnCooldown
                    const isHuntOnCooldown = label === 'Hunt' && huntCooldown.isOnCooldown
                    const isDigOnCooldown = label === 'Dig' && digCooldown.isOnCooldown
                    const isPostOnCooldown = label === 'Post' && postCooldown.isOnCooldown
                    const isStreamOnCooldown = label === 'Stream' && streamCooldown.isOnCooldown
                    const isExploreOnCooldown = label === 'Explore' && exploreCooldown.isOnCooldown
                    const isGardenOnCooldown = label === 'Garden' && gardenCooldown.isOnCooldown
                    const isOnCooldown = isSearchOnCooldown || isCrimeOnCooldown || isWorkOnCooldown || isHuntOnCooldown || isFishOnCooldown || isDigOnCooldown || isPostOnCooldown || isStreamOnCooldown || isExploreOnCooldown || isGardenOnCooldown

                    return (
                      <button
                        key={label}
                        onClick={() => isActive && !isOnCooldown && setActiveActivity(label)}
                        className={`group w-full rounded-xl sm:rounded-2xl border border-neutral-800/70 bg-neutral-900/60 hover:bg-neutral-900 hover:border-neutral-700 transition-colors px-4 sm:px-5 py-4 sm:py-4 text-left shadow-soft ${
                          isActive && !isOnCooldown ? 'cursor-pointer' : 'cursor-default'
                        } select-none ${
                          isOnCooldown ? 'bg-gray-800 border-gray-600 relative overflow-hidden' : ''
                        }`}
                        type="button"
                        aria-label={`${label} ${isActive ? '(active)' : '(coming soon)'}${isOnCooldown ? ' (on cooldown)' : ''}`}
                        disabled={isOnCooldown}
                      >
                        {isOnCooldown && (
                          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-gray-700/20 to-transparent animate-pulse"></div>
                        )}
                        <div className="relative z-10 flex items-center gap-3">
                          <div className="text-xl sm:text-2xl">
                            {label === 'Search' && '🔍'}
                            {label === 'Crime' && '🦹'}
                            {label === 'Work' && '💼'}
                            {label === 'Hunt' && '🏹'}
                            {label === 'Fish' && '🐟'}
                            {label === 'Dig' && '⛏️'}
                            {label === 'Post' && '💬'}
                            {label === 'Stream' && '⏺️'}
                            {label === 'Explore' && '🗺️'}
                            {label === 'Garden' && '🌾'}
                          </div>
                          <div className="flex-1">
                            <div className="text-base sm:text-lg font-medium">{label}</div>
                            <div className="text-xs sm:text-sm text-neutral-400">
                              {isOnCooldown ? (
                                <div className="flex items-center gap-1">
                                  <div className="w-3 h-3 border-2 border-gray-400 border-t-transparent rounded-full animate-spin"></div>
                                  <span>
                                    {label === 'Search' ? searchCooldown.timeLeft :
                                     label === 'Crime' ? crimeCooldown.timeLeft :
                                     label === 'Work' ? workCooldown.timeLeft :
                                     label === 'Hunt' ? huntCooldown.timeLeft :
                                     label === 'Fish' ? fishCooldown.timeLeft :
                                     label === 'Dig' ? digCooldown.timeLeft :
                                     label === 'Post' ? postCooldown.timeLeft :
                                     label === 'Stream' ? streamCooldown.timeLeft :
                                     label === 'Explore' ? exploreCooldown.timeLeft :
                                     label === 'Garden' ? gardenCooldown.timeLeft : 0}s
                                  </span>
                                </div>
                              ) : isActive ? (
                                label === 'Search' ? 'Discover hidden treasures' :
                                label === 'Crime' ? 'Take risks for big rewards' :
                                label === 'Work' ? 'Earn steady income' :
                                label === 'Hunt' ? 'Track wild game' :
                                label === 'Fish' ? 'Cast your line' :
                                label === 'Dig' ? 'Unearth buried secrets' :
                                label === 'Post' ? 'Share your thoughts' :
                                label === 'Stream' ? 'Broadcast to the world' :
                                label === 'Explore' ? 'Adventure awaits' :
                                label === 'Garden' ? 'Cultivate your crops' : 'Click to play'
                              ) : (
                                'Coming soon'
                              )}
                            </div>
                          </div>
                        </div>
                      </button>
                    )
                  })}
                  </div>
                </div>
              )}
            </section>
          </main>

          {/* Footer */}
          <Footer />
          {/* Notifications */}
          <Toaster />
        </div>
      } />
    </Routes>
  )
}

export default App
